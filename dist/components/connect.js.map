{"version":3,"sources":["../../src/components/connect.js"],"names":["id","paths","mapStateToProps","mapUpdateToProps","dispatch","$updateGraph","WrappedComponent","FalcorConnect","arguments","_id","updatePaths","removePaths","context","createElement","Object","assign","props","store","updateGraph","bind","falcor","componentPathMap","children","contextTypes","PropTypes","object","func"],"mappings":";;;;;;;;AAAA;;;;AAGA;;;;;;;;;;AAEA,IAAIA,KAAK,CAAT;;kBAEe,UACbC,KADa,EAEbC,eAFa,EAIV;AAAA,MADHC,gBACG,uEADgB,UAACC,QAAD,EAAWC,YAAX;AAAA,WAA6B,EAACD,kBAAD,EAAWC,0BAAX,EAA7B;AAAA,GAChB;;AACH,SAAO,UAACC,gBAAD,EAAsB;AAAA,QACrBC,aADqB;AAAA;;AAEzB,+BAAc;AAAA;;AAAA,mIACHC,SADG;;AAEZ,cAAKC,GAAL,GAAWT,IAAX;AAFY;AAGb;;AALwB;AAAA;AAAA,4CAOL;AAClB,eAAKU,WAAL,CAAiBT,KAAjB;AACD;AATwB;AAAA;AAAA,+CAWF;AACrB,eAAKU,WAAL;AACD;;AAED;;AAfyB;AAAA;AAAA,oCAgBbV,KAhBa,EAgBN;AACjB,eAAKW,OAAL,CAAaF,WAAb,CAAyB,KAAKD,GAA9B,EAAmCR,KAAnC;AACD;AAlBwB;AAAA;AAAA,sCAoBX;AACZ,eAAKW,OAAL,CAAaD,WAAb,CAAyB,KAAKF,GAA9B;AACD;AAtBwB;AAAA;AAAA,iCAwBhB;AACP,iBAAO,gBAAMI,aAAN,CAAoBP,gBAApB,EAAsCQ,OAAOC,MAAP,CAC3C,EAD2C,EAE3C,KAAKC,KAFsC,EAG3Cb,iBAAiB,KAAKS,OAAL,CAAaK,KAAb,CAAmBb,QAApC,EAA8C,KAAKQ,OAAL,CAAaM,WAAb,EAA9C,CAH2C,EAI3C;AACER,yBAAa,KAAKA,WAAL,CAAiBS,IAAjB,CAAsB,IAAtB,CADf;AAEEC,oBAAQ,KAAKR,OAAL,CAAaQ,MAFvB;AAGEnB,mBAAO,KAAKW,OAAL,CAAaS,gBAAb,CAA8B,KAAKZ,GAAnC;AAHT,WAJ2C,CAAtC,EASJ,KAAKO,KAAL,CAAWM,QATP,CAAP;AAUD;AAnCwB;;AAAA;AAAA;;AAoC1B;;AAEDf,kBAAcgB,YAAd,GAA6B;AAC3BN,aAAO,gBAAMO,SAAN,CAAgBC,MADI;AAE3BL,cAAQ,gBAAMI,SAAN,CAAgBC,MAFG;AAG3BJ,wBAAkB,gBAAMG,SAAN,CAAgBC,MAHP;AAI3Bf,mBAAa,gBAAMc,SAAN,CAAgBE,IAJF;AAK3Bf,mBAAa,gBAAMa,SAAN,CAAgBE,IALF;AAM3BR,mBAAa,gBAAMM,SAAN,CAAgBE;AANF,KAA7B;;AASA,WAAO,yBAAQxB,eAAR,EAAyB,EAAzB,EAA6BK,aAA7B,CAAP;AACD,GAhDD;AAiDD,C","file":"connect.js","sourcesContent":["import React, {\n  Component\n}                         from 'react';\nimport { connect }        from 'react-redux';\n\nlet id = 0;\n\nexport default (\n  paths,\n  mapStateToProps,\n  mapUpdateToProps = (dispatch, $updateGraph) => ({dispatch, $updateGraph})\n) => {\n  return (WrappedComponent) => {\n    class FalcorConnect extends Component {\n      constructor() {\n        super(...arguments);\n        this._id = id++;\n      }\n\n      componentDidMount() {\n        this.updatePaths(paths);\n      }\n\n      componentWillUnmount() {\n        this.removePaths();\n      }\n\n      // TODO - paths should be optional\n      updatePaths(paths) {\n        this.context.updatePaths(this._id, paths);\n      }\n\n      removePaths() {\n        this.context.removePaths(this._id);\n      }\n\n      render() {\n        return React.createElement(WrappedComponent, Object.assign(\n          {},\n          this.props,\n          mapUpdateToProps(this.context.store.dispatch, this.context.updateGraph()),\n          {\n            updatePaths: this.updatePaths.bind(this),\n            falcor: this.context.falcor,\n            paths: this.context.componentPathMap[this._id]\n          }\n        ), this.props.children);\n      }\n    };\n\n    FalcorConnect.contextTypes = {\n      store: React.PropTypes.object,\n      falcor: React.PropTypes.object,\n      componentPathMap: React.PropTypes.object,\n      updatePaths: React.PropTypes.func,\n      removePaths: React.PropTypes.func,\n      updateGraph: React.PropTypes.func\n    };\n\n    return connect(mapStateToProps, {})(FalcorConnect);\n  };\n};\n"]}