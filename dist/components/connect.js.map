{"version":3,"sources":["../../src/components/connect.js"],"names":["id","paths","mapStateToProps","mapUpdateToProps","dispatch","falcor","$updateGraph","WrappedComponent","FalcorConnect","arguments","_id","updatePaths","removePaths","context","props","store","updateGraph","bind","componentPathMap","children","contextTypes","PropTypes","object","func"],"mappings":";;;;;;;;;;AAAA;;;;AAGA;;;;;;;;;;AAEA,IAAIA,KAAK,CAAT;;kBAEe,UACbC,KADa,EAEbC,eAFa,EAIV;AAAA,MADHC,gBACG,uEADgB,UAACC,QAAD,EAAWC,MAAX,EAAmBC,YAAnB;AAAA,WAAqC,EAACF,kBAAD,EAAWC,cAAX,EAAmBC,0BAAnB,EAArC;AAAA,GAChB;;AACH,SAAO,UAACC,gBAAD,EAAsB;AAAA,QACrBC,aADqB;AAAA;;AAEzB,+BAAc;AAAA;;AAAA,mIACHC,SADG;;AAEZ,cAAKC,GAAL,GAAWV,IAAX;AAFY;AAGb;;AALwB;AAAA;AAAA,4CAOL;AAClB,eAAKW,WAAL,CAAiBV,KAAjB;AACD;AATwB;AAAA;AAAA,+CAWF;AACrB,eAAKW,WAAL;AACD;;AAED;;AAfyB;AAAA;AAAA,oCAgBbX,KAhBa,EAgBN;AACjB,eAAKY,OAAL,CAAaF,WAAb,CAAyB,KAAKD,GAA9B,EAAmCT,KAAnC;AACD;AAlBwB;AAAA;AAAA,sCAoBX;AACZ,eAAKY,OAAL,CAAaD,WAAb,CAAyB,KAAKF,GAA9B;AACD;AAtBwB;AAAA;AAAA,iCAwBhB;AACP,iBACE;AAAC,4BAAD;AAAA,yBACM,KAAKI,KADX,EAEMX,iBAAiB,KAAKU,OAAL,CAAaE,KAAb,CAAmBX,QAApC,EAA8C,KAAKS,OAAL,CAAaR,MAA3D,EAAmE,KAAKQ,OAAL,CAAaG,WAAb,EAAnE,CAFN;AAGE,2BAAa,KAAKL,WAAL,CAAiBM,IAAjB,CAAsB,IAAtB,CAHf;AAIE,sBAAQ,KAAKJ,OAAL,CAAaR,MAJvB;AAKE,qBAAO,KAAKQ,OAAL,CAAaK,gBAAb,CAA8B,KAAKR,GAAnC;AALT;AAOG,iBAAKI,KAAL,CAAWK;AAPd,WADF;AAWD;AApCwB;;AAAA;AAAA;;AAqC1B;;AAEDX,kBAAcY,YAAd,GAA6B;AAC3BL,aAAO,gBAAMM,SAAN,CAAgBC,MADI;AAE3BjB,cAAQ,gBAAMgB,SAAN,CAAgBC,MAFG;AAG3BJ,wBAAkB,gBAAMG,SAAN,CAAgBC,MAHP;AAI3BX,mBAAa,gBAAMU,SAAN,CAAgBE,IAJF;AAK3BX,mBAAa,gBAAMS,SAAN,CAAgBE,IALF;AAM3BP,mBAAa,gBAAMK,SAAN,CAAgBE;AANF,KAA7B;;AASA,WAAO,yBAAQrB,eAAR,EAAyB,EAAzB,EAA6BM,aAA7B,CAAP;AACD,GAjDD;AAkDD,C","file":"connect.js","sourcesContent":["import React, {\n  Component\n}                         from 'react';\nimport { connect }        from 'react-redux';\n\nlet id = 0;\n\nexport default (\n  paths,\n  mapStateToProps,\n  mapUpdateToProps = (dispatch, falcor, $updateGraph) => ({dispatch, falcor, $updateGraph})\n) => {\n  return (WrappedComponent) => {\n    class FalcorConnect extends Component {\n      constructor() {\n        super(...arguments);\n        this._id = id++;\n      }\n\n      componentDidMount() {\n        this.updatePaths(paths);\n      }\n\n      componentWillUnmount() {\n        this.removePaths();\n      }\n\n      // TODO - paths should be optional\n      updatePaths(paths) {\n        this.context.updatePaths(this._id, paths);\n      }\n\n      removePaths() {\n        this.context.removePaths(this._id);\n      }\n\n      render() {\n        return (\n          <WrappedComponent\n            {...this.props}\n            {...mapUpdateToProps(this.context.store.dispatch, this.context.falcor, this.context.updateGraph())}\n            updatePaths={this.updatePaths.bind(this)}\n            falcor={this.context.falcor}\n            paths={this.context.componentPathMap[this._id]}\n          >\n            {this.props.children}\n          </WrappedComponent>\n        );\n      }\n    };\n\n    FalcorConnect.contextTypes = {\n      store: React.PropTypes.object,\n      falcor: React.PropTypes.object,\n      componentPathMap: React.PropTypes.object,\n      updatePaths: React.PropTypes.func,\n      removePaths: React.PropTypes.func,\n      updateGraph: React.PropTypes.func\n    };\n\n    return connect(mapStateToProps, {})(FalcorConnect);\n  };\n};\n"]}